// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Store first and last name as Strings
  firstName String @db.VarChar(40)
  lastName  String @db.VarChar(40)

  //Store email as a unique String
  email String @unique

  //Store a boolean value to determine if a user is a member or not
  //Defaults to false if not specified
  isMember Boolean @default(false)

  //Image will be saved
  profilePic String @default("default.jpg")

  // relational fields
  //Holds a reference to the mentor table using a User field, going to see how this works going forward, not entirely sure
  mentor   Mentor[]
  quotes   Quote[]
  officers Officer[]
}

model Quote {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Store the timestamp quote was added
  date_added DateTime

  //Store quote as a String 
  quote String @db.VarChar(255)

  //Refrences userId
  user_id Int

  //Store author name as a String 
  author String @db.VarChar(40)

  //Relational fields
  //Refrences user_id
  user User @relation(fields: [user_id], references: [id])
}

model OfficerPosition {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Store position title as a String 
  title String @db.VarChar(40)

  //States primary as a boolean
  is_primary Boolean @default(false)

  //Store email as a unique String
  email String @unique @db.VarChar(40)

  //Relational fields
  officers Officer[]
}

model Officer {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Refrences positionId
  position_id Int

  //Refrences userId
  user_id Int

  //Store active status as a boolean
  is_active Boolean

  //Store startDate and endDate as a DateTime
  start_date DateTime
  end_date   DateTime

  //Relational fields
  user     User            @relation(fields: [user_id], references: [id])
  position OfficerPosition @relation(fields: [position_id], references: [id])
}

model Mentor {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Refrences userId 
  user_Id Int

  //Store expirationDate as a DateTime
  expirationDate DateTime

  //Stores active status as a Boolean
  isActive Boolean

  //Relatinal fieldS
  mentorSkill MentorSkill[]
  courseTaken CourseTaken[]
  schedule    Schedule[]
  //Refrence field
  mentor      User          @relation(fields: [user_Id], references: [id])
}

model Skill {
  //Store an automatically generated unique int for id
  id          Int           @id @default(autoincrement())
  //Store skill as a unique String
  skill       String        @unique
  //Relatinal field
  mentorSkill MentorSkill[]
}

model MentorSkill {
  //Store an automatically generated unique int for id
  id        Int    @id @default(autoincrement())
  //Refrences mentorId
  mentor_Id Int
  //Refrences skillId
  skill_Id  Int
  //Referential Fields
  mentor    Mentor @relation(fields: [mentor_Id], references: [id])
  skill     Skill  @relation(fields: [skill_Id], references: [id])
}

model Department {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Store title as a String
  title String

  //Relatinal field
  course Course[]
}

model Course {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Store title as a String
  title String @db.VarChar(40)

  //Refrence departmentId
  departmentId Int

  //Stores code as an Integer
  code Int

  //Relational field
  courseTaken CourseTaken[]

  //Refrence field
  department Department @relation(fields: [departmentId], references: [id])
}

model CourseTaken {
  //Store an automatically generated unique int for id
  id       Int @id @default(autoincrement())
  //Refrence mentorId
  mentorId Int
  //Refrence courseId
  courseId Int

  //Relation fields
  mentor Mentor @relation(fields: [mentorId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model HourBlock {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Stores day of the week as a String
  weekday String

  //Stores time block startTime as a DateTime
  startTime DateTime @db.Time()

  //Refrenced relation field
  schedule Schedule[]
}

model Schedule {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Refrence mentorid
  mentorId    Int
  //Refrence houtBlockId 
  hourBlockId Int

  //Relational fields
  hourBlock HourBlock @relation(fields: [hourBlockId], references: [id])
  mentor    Mentor    @relation(fields: [mentorId], references: [id])
}
