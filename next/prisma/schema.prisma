// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  //Store an automatically generated unique int for id
  id Int @id @default(autoincrement())

  //Store first and last name as Strings
  firstName String
  lastName  String

  //Store email as a unique String
  email String @unique

  //Store a boolean value to determine if a user is a member or not
  //Defaults to false if not specified
  isMember Boolean @default(false)

  //Image will be saved
  profilePic String @default("default.jpg")

  // relational fields
  //Holds a reference to the mentor table using a User field, going to see how this works going forward, not entirely sure
  mentor   Mentor[]
  quotes   Quote[]
  officers Officer[]
}

model Quote {
  id         Int      @id @default(autoincrement())
  date_added DateTime
  quote      String   @db.VarChar(255)
  user_id    Int
  author     String   @db.VarChar(40)

  // relational fields
  user User @relation(fields: [user_id], references: [id])
}

model OfficerPosition {
  id         Int     @id @default(autoincrement())
  title      String  @db.VarChar(40)
  is_primary Boolean @default(false)
  email      String  @db.VarChar(40)

  // relational fields
  officers Officer[]
}

model Officer {
  id          Int      @id @default(autoincrement())
  position_id Int
  user_id     Int
  is_active   Boolean
  start_date  DateTime
  end_date    DateTime

  // relational fields
  user     User            @relation(fields: [user_id], references: [id])
  position OfficerPosition @relation(fields: [position_id], references: [id])
}

model Mentor {
  id Int @id @default(autoincrement())

  mentor         User          @relation(fields: [userId], references: [id])
  userId         Int
  expirationDate DateTime
  isActive       Boolean
  mentorSkill    MentorSkill[]
}

model Skill {
  id          Int           @id @default(autoincrement())
  skill       String        @unique
  mentorSkill MentorSkill[]
}

model MentorSkill {
  id       Int    @id @default(autoincrement())
  mentor   Mentor @relation(fields: [mentorId], references: [id])
  mentorId Int
  skill    Skill  @relation(fields: [skillId], references: [id])
  skillId  Int
}

model Department {
  id     Int      @id @default(autoincrement())
  title  String
  course Course[]
}

model Course {
  id           Int        @id @default(autoincrement())
  title        String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  code         Int
}
